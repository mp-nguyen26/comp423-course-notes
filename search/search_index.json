{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Minh's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting Up a Dev Container for Rust","text":"<ul> <li>Primary author: Minh Nguyen</li> <li>Reviewer: Christina Do</li> </ul>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Before we get started, make sure you have the following:</p> <ol> <li>A GitHub account</li> <li>Git installed</li> <li>Visual Studio Code</li> <li>Docker</li> <li>Some knowledge of command-line basics</li> </ol>"},{"location":"tutorials/rust-setup/#git-setup","title":"Git Setup","text":""},{"location":"tutorials/rust-setup/#step-1-create-a-local-directory-and-initialize-git","title":"Step 1: Create a local directory and initialize git.","text":"<ul> <li>Open terminal/command prompt.</li> <li>Change into a parent directory in which you would like to house this project, or by default, it will be in your user's home directory.</li> <li>Create a new directory for your project: <pre><code>mkdir rust-project\ncd rust-project\n</code></pre></li> <li>Initialize as a new Git repository: <pre><code>git init\n</code></pre></li> </ul> <p>What does <code>git init</code> do?</p> <p>This command turns a regular directory into a git repository. After it is configured this way, all git commands can now work.</p> <ul> <li>Create a README file: <pre><code>echo \"# Rust Project\" &gt; README.md\necho \"# https://mp-nguyen26.github.io/comp423-course-notes/\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ul>"},{"location":"tutorials/rust-setup/#step-2-create-a-remote-repository-on-github","title":"Step 2: Create a remote repository on GitHub.","text":"<ul> <li>Log into your GitHub account and navigate to the \"Create a New Repository\" page.</li> <li>Fill in the following details:<ol> <li>Repository Name: rust-project</li> <li>Description: \"A remote repo for running a simple Rust program.\"</li> <li>Visibility: Public</li> </ol> </li> <li>Do not initialize the repository with a README, .gitignore, or license.</li> <li>Click Create Repository.</li> </ul>"},{"location":"tutorials/rust-setup/#step-3-link-your-local-repository-to-github","title":"Step 3: Link your local repository to GitHub.","text":"<ul> <li>Add the GitHub repository as a remote: <pre><code>git remote add origin https://github.com/&lt;your-username&gt;/rust-project.git\n</code></pre></li> <li>Replace <code>&lt;your-username&gt;</code> with your GitHub username.</li> <li>Push your local commits to your GitHub repository: <pre><code>git push --set-upstream origin main\n</code></pre></li> </ul> <p>What does <code>--set-upstream</code> do?</p> <p>This command sets up the main branch to track the remote branch so that future pushes and pulls can be done without specifying the branch name.</p>"},{"location":"tutorials/rust-setup/#development-container-setup","title":"Development Container Setup","text":""},{"location":"tutorials/rust-setup/#step-1-configuring-development-container","title":"Step 1: Configuring development container","text":"<ul> <li>In VS Code, open your <code>rust-project</code> directory using File &gt; Open Folder.</li> <li>Install the Dev Containers extension for VS Code.</li> <li>Create a <code>.devcontainer</code> directory in the root of your project. Inside, place the following file: <code>devcontainer.json</code>. The filepath should be as follows: <code>.devcontainer/devcontainer.json</code>.</li> <li>Specify the following<ol> <li><code>name</code>: A descriptive name for your dev container.</li> <li><code>image</code>: We will use the latest version of a Rust environment from Microsoft.</li> <li><code>customizations</code>: We will install the official <code>rust-lang.rust-analyzer</code> extension.</li> </ol> </li> </ul> <pre><code>{\n    \"name\": \"Rust Development Environment\",\n    \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n    \"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\"rust-lang.rust-analyzer\"]\n        }\n    }\n}\n</code></pre> <p>More about <code>devcontainer.json</code></p> <p>The <code>devcontainer.json</code> file specifies configuration for a consistent development environment using a Docker image.</p>"},{"location":"tutorials/rust-setup/#step-2-reopen-your-project-in-a-vs-code-dev-container","title":"Step 2: Reopen your project in a VS Code Dev Container.","text":"<ul> <li>Press <code>Ctrl+Shift+P</code> for Windows or <code>Cmd+Shift+P</code> for Mac, type \"Dev Containers: Reopen in Container,\" and select that option</li> <li>This may take a few minutes while the image is downloaded; the download size can be several hundred megabytes. Click on \"show log\" at the prompt in the bottom right corner of your VS Code window to track its progress.</li> <li>Once the dev container setup is complete, close the terminal tab (trash can) and open a new terminal pane within VS Code (<code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code> and search for \"Terminal\").</li> <li>Try running <code>rustc --version</code> to prove that the container is running a recent version of Rust. (As of this writing in January 2025, this version should be <code>1.83.0</code>)</li> </ul>"},{"location":"tutorials/rust-setup/#step-3-build-and-run-your-rust-program","title":"Step 3: Build and run your Rust program.","text":"<ul> <li>Run the following command: <pre><code>cargo new my-project --vcs none\n</code></pre></li> </ul> <p>Info</p> <p>The flag <code>--vcs none</code> ensures that a new <code>git</code> repository ins't created.</p> <ul> <li> <p>A new folder with the name <code>my-project</code> will be created. Navigate to <code>my-project/src/main.rs</code>. There should be a simple \"Hello World\" function there. Replace this with: <pre><code>fn main() {\n    println!(\"Hello COMP423!\");\n}\n</code></pre></p> </li> <li> <p>Then, <code>cd</code> to your <code>my-project</code> folder.</p> </li> <li> <p>Run <code>cargo build</code>. This is similar to <code>gcc</code> with C, but instead it compiles source files from Rust to a binary executable file.</p> </li> </ul> <p>Warning</p> <p>An error will pop up if you run this command while not in your <code>my-project</code> folder.</p> <ul> <li>Last but not least, run <code>cargo run</code>, which actually executes the file and allows it to function. You should see <code>Hello COMP423!</code> in the output!</li> </ul>"}]}